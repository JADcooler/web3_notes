listening to events

myContract.events.EventName(async (err, event) => {
  if (err) {
    console.error('Error on event', err)
    return
  }
  // Do something
})

For more complex use cases, you could also specify a filter like so:

myContract.events.EventName({ filter: { myParam: 1 }}, async (err, event) => {
  if (err) {
    console.error('Error on event', err)
    return
  }
  // Do something
})
The above triggers only when an event where myParam is equal to 1 gets fired.

async function filterEvents (oracleContract, web3js) {
  oracleContract.events.GetLatestEthPriceEvent(async (err, event) => {
    if (err) {
      console.error('Error on event', err)
      return
    }
    await addRequestToQueue(event)
  })
------------------------------------------------------------------------------------------------------------------------
retreiving param:

Note that you can access an event's return values through the returnValues object. Say your event is defined like this:

event TransferTokens(address from, address to, uint256 amount)

Then, your JavaScript code that retrieves from, to, and amount should be similar to the following:

async function parseEvent (event) {
  const from = event.returnValues.from
  const to = event.returnValues.to
  const amount = event.returnValues.amount
}
