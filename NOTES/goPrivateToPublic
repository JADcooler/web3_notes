package main

import (
    "crypto/ecdsa"
    "crypto/elliptic"
    "crypto/rand"
    "fmt"
    "log"
    "math/big"
)

func PubBytes(pub *ecdsa.PublicKey) []byte {
    if pub == nil || pub.X == nil || pub.Y == nil {
        return nil
    }
    return elliptic.Marshal(elliptic.P256(), pub.X, pub.Y)
}

func toECDSAFromHex(hexString string) (*ecdsa.PrivateKey, error) {
    pk := new(ecdsa.PrivateKey)
    pk.D, _ = new(big.Int).SetString(hexString, 16)
    pk.PublicKey.Curve = elliptic.P256()
    pk.PublicKey.X, pk.PublicKey.Y = pk.PublicKey.Curve.ScalarBaseMult(pk.D.Bytes())
    return pk, nil
}

func main() {
    pHex := "208242c40acdfa9ed889e685c23547acbed9befc60371e9875fbcd736340bb48c678ef1aa456da65c6fc5861d44892cdfac0c6c8c2560bf0c9fbcdae2f4735a9"
    pk, err := toECDSAFromHex(pHex)
        if err != nil {
        log.Fatal(err.Error())
    }
    fmt.Printf("Generated Public Key: %x\n", PubBytes(&pk.PublicKey))

    hash := []byte("Hello Gopher!")

    fmt.Printf("\nSigning...\n\n")
    r, s, err := ecdsa.Sign(rand.Reader, pk, hash)
    if err != nil {
        log.Fatal(err.Error())
    }
    fmt.Printf("\nVerifying..\n\n")
    if ecdsa.Verify(&pk.PublicKey, hash, r, s) {
        fmt.Println("Success!!")
    } else {
        fmt.Println("Failure!!")
    }
}
