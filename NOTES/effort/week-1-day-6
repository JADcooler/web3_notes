ERC20 permit
============

Before:

User submits token.approve(myContract.address, amount) transaction.
Wait for transaction confirmation.
User submits second myContract.doSomething() transaction which internally uses token.transferFrom.

After:
User signs signature = approve(myContract.address, amount).
User submits signature to myContract.doSomething(signature).
myContract uses token.permit to increase allowance, followed by token.transferFrom.

ecdsa
=====

ethereum uses secp256k1 curve

ecrecover(hash,v,r,s)
XXX
attempts to recover the public key used to sign this from the digital signature
(just checks if msg.sender as a key decrypts this sign to the hash message lol)
probable more than that but thats how I think it goes. XXXX

[Oops i was wrong, we obviously use some crypto stuff to derive the public key from
signature, as the main reason this was brought up was to submit the txn using the
signature of some other private key. The msg.sender should not matter.]

how is ecrecover used in real projects?
like ethers.js?

vuln
====

1) it returns zero on invalid address, if default value of address isn't checked, might cause issue

2) the hash data should include some nonce or such to prevent same data to be reused again
	signature malleability.
	#Signature replay attack
	[https://medium.com/cryptronics/signature-replay-vulnerabilities-in-smart-contracts-3b6f7596df57]

3) #cross contract attack
	the same signature with some nonce or something can be used to attack the same contract deployed in
	another chain, this is why domain seperator is necessary :p
	If contract address is not used in computing the hash, its vulnerable to cross chain attacks



